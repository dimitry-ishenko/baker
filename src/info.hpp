////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2016 Dimitry Ishenko
// Distributed under the GNU GPL v2. For full terms please visit:
// http://www.gnu.org/licenses/gpl.html
//
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com

////////////////////////////////////////////////////////////////////////////////
#ifndef PIE_INFO_HPP
#define PIE_INFO_HPP

#include <functional>
#include <string>

////////////////////////////////////////////////////////////////////////////////
namespace pie
{

////////////////////////////////////////////////////////////////////////////////
static constexpr int invalid = -1;

////////////////////////////////////////////////////////////////////////////////
using vid = int;
using pid = int;
using iface = int;

////////////////////////////////////////////////////////////////////////////////
struct regi
{
    pie::vid vid;
    pie::pid pid;
    pie::iface iface;

    bool operator<(const regi& x) const noexcept
    {
        return (vid < x.vid)
            || (vid == x.vid && (pid < x.pid
                             || (pid == x.pid && iface < x.iface)));
    }
};

////////////////////////////////////////////////////////////////////////////////
struct info
{
    std::string path;
    pie::regi regi;
};

////////////////////////////////////////////////////////////////////////////////
using func = std::function<int(const std::string&)>;

}

////////////////////////////////////////////////////////////////////////////////
#endif // PIE_INFO_HPP
